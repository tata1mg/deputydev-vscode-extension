type LanguageInfo = {
  d: string;
  p: string;
};

const extToLangMap: Record<string, LanguageInfo> = {
  js: { d: 'JavaScript', p: 'javascript' },
  ts: { d: 'TypeScript', p: 'typescript' },
  jsx: { d: 'JavaScript (React)', p: 'jsx' },
  tsx: { d: 'TypeScript (React)', p: 'tsx' },
  py: { d: 'Python', p: 'python' },
  rb: { d: 'Ruby', p: 'ruby' },
  java: { d: 'Java', p: 'java' },
  kt: { d: 'Kotlin', p: 'kotlin' },
  kts: { d: 'Kotlin', p: 'kotlin' },
  php: { d: 'PHP', p: 'php' },
  cs: { d: 'C#', p: 'csharp' },
  cpp: { d: 'C++', p: 'cpp' },
  c: { d: 'C', p: 'c' },
  go: { d: 'Go', p: 'go' },
  rs: { d: 'Rust', p: 'rust' },
  swift: { d: 'Swift', p: 'swift' },
  html: { d: 'HTML', p: 'markup' },
  htm: { d: 'HTML', p: 'markup' },
  css: { d: 'CSS', p: 'css' },
  scss: { d: 'Sass (SCSS)', p: 'scss' },
  sass: { d: 'Sass', p: 'sass' },
  json: { d: 'JSON', p: 'json' },
  yml: { d: 'YAML', p: 'yaml' },
  yaml: { d: 'YAML', p: 'yaml' },
  xml: { d: 'XML', p: 'markup' },
  sh: { d: 'Shell', p: 'bash' },
  bash: { d: 'Shell', p: 'bash' },
  zsh: { d: 'Shell', p: 'bash' },
  sql: { d: 'SQL', p: 'sql' },
  dockerfile: { d: 'Docker', p: 'docker' },
  md: { d: 'Markdown', p: 'markdown' },
  r: { d: 'R', p: 'r' },
  lua: { d: 'Lua', p: 'lua' },
  vue: { d: 'Vue', p: 'markup' },
  makefile: { d: 'Makefile', p: 'makefile' },
  toml: { d: 'TOML', p: 'toml' },
  ini: { d: 'INI', p: 'ini' },
  pl: { d: 'Perl', p: 'perl' },
  scala: { d: 'Scala', p: 'scala' },
  dart: { d: 'Dart', p: 'dart' },
  tex: { d: 'LaTeX', p: 'latex' },
  csharp: { d: 'C#', p: 'csharp' },
  vb: { d: 'Visual Basic', p: 'vbnet' },
  vba: { d: 'Visual Basic (VBA)', p: 'vbnet' },
  sol: { d: 'Solidity', p: 'solidity' },
  coffee: { d: 'CoffeeScript', p: 'coffeescript' },
  erb: { d: 'ERB', p: 'erb' },
  rkt: { d: 'Racket', p: 'racket' },
  clj: { d: 'Clojure', p: 'clojure' },
  jl: { d: 'Julia', p: 'julia' },
  ex: { d: 'Elixir', p: 'elixir' },
  elm: { d: 'Elm', p: 'elm' },
  fs: { d: 'F#', p: 'fsharp' },
  hs: { d: 'Haskell', p: 'haskell' },
  ml: { d: 'OCaml', p: 'ocaml' },
  purs: { d: 'PureScript', p: 'purescript' },
  pas: { d: 'Pascal', p: 'pascal' },
  awk: { d: 'AWK', p: 'awk' },
  nix: { d: 'Nix', p: 'nix' },
  ada: { d: 'Ada', p: 'ada' },
  d: { d: 'D', p: 'd' },
  f90: { d: 'Fortran', p: 'fortran' },
  f: { d: 'Fortran', p: 'fortran' },
  m: { d: 'Objective-C', p: 'objectivec' },
  mm: { d: 'Objective-C++', p: 'objectivec' },
  bat: { d: 'Batch', p: 'batch' },
  ps1: { d: 'PowerShell', p: 'powershell' },
  abap: { d: 'ABAP', p: 'abap' },
  agda: { d: 'Agda', p: 'agda' },
  al: { d: 'AL', p: 'al' },
  antlr4: { d: 'ANTLR4', p: 'antlr4' },
  apacheconf: { d: 'Apache Configuration', p: 'apacheconf' },
  apex: { d: 'Apex', p: 'apex' },
  apl: { d: 'APL', p: 'apl' },
  applescript: { d: 'AppleScript', p: 'applescript' },
  arduino: { d: 'Arduino', p: 'arduino' },
  asm6502: { d: '6502 Assembly', p: 'asm6502' },
  asciidoc: { d: 'AsciiDoc', p: 'asciidoc' },
  aspnet: { d: 'ASP.NET (C#)', p: 'aspnet' },
  autohotkey: { d: 'AutoHotkey', p: 'autohotkey' },
  autoit: { d: 'AutoIt', p: 'autoit' },
  basic: { d: 'BASIC', p: 'basic' },
  batch: { d: 'Batch', p: 'batch' },
  bbcode: { d: 'BBcode', p: 'bbcode' },
  bicep: { d: 'Bicep', p: 'bicep' },
  bnf: { d: 'BNF', p: 'bnf' },
  brainfuck: { d: 'Brainfuck', p: 'brainfuck' },
  clojure: { d: 'Clojure', p: 'clojure' },
  cmake: { d: 'CMake', p: 'cmake' },
  coffeescript: { d: 'CoffeeScript', p: 'coffeescript' },
  crystal: { d: 'Crystal', p: 'crystal' },
  abnf: { d: 'ABNF', p: 'abnf' },
  arff: { d: 'ARFF', p: 'arff' },
  armasm: { d: 'ARM Assembly', p: 'armasm' },
  arturo: { d: 'Arturo', p: 'arturo' },
  adoc: { d: 'AsciiDoc', p: 'asciidoc' },
  avs: { d: 'AviSynth', p: 'avisynth' },
  gawk: { d: 'AWK', p: 'awk' },
  shell: { d: 'Bash', p: 'bash' },
  shortcode: { d: 'BBcode', p: 'bbcode' },
  bbj: { d: 'BBj', p: 'bbj' },
  birb: { d: 'Birb', p: 'birb' },
  bison: { d: 'Bison', p: 'bison' },
  rbnf: { d: 'BNF', p: 'bnf' },
  bqn: { d: 'BQN', p: 'bqn' },
  brightscript: { d: 'BrightScript', p: 'brightscript' },
  bro: { d: 'Bro', p: 'bro' },
  bsl: { d: 'BSL', p: 'bsl' },
  cfc: { d: 'CFScript', p: 'cfscript' },
  chaiscript: { d: 'ChaiScript', p: 'chaiscript' },
  cil: { d: 'CIL', p: 'cil' },
  cilkc: { d: 'Cilk/C', p: 'cilkc' },
  cilkcpp: { d: 'Cilk/C++', p: 'cilkcpp' },
  cobol: { d: 'COBOL', p: 'cobol' },
  conc: { d: 'Concurnas', p: 'concurnas' },
  csp: { d: 'Content-Security-Policy', p: 'csp' },
  cooklang: { d: 'Cooklang', p: 'cooklang' },
  coq: { d: 'Coq', p: 'coq' },
  csv: { d: 'CSV', p: 'csv' },
  cue: { d: 'CUE', p: 'cue' },
  cypher: { d: 'Cypher', p: 'cypher' },
  dataweave: { d: 'DataWeave', p: 'dataweave' },
  dax: { d: 'DAX', p: 'dax' },
  dhall: { d: 'Dhall', p: 'dhall' },
  diff: { d: 'Diff', p: 'diff' },
  django: { d: 'Django/Jinja2', p: 'django' },
  dot: { d: 'DOT (Graphviz)', p: 'dot' },
  editorconfig: { d: 'EditorConfig', p: 'editorconfig' },
  eiffel: { d: 'Eiffel', p: 'eiffel' },
  ejs: { d: 'EJS', p: 'ejs' },
  factor: { d: 'Factor', p: 'factor' },
  flow: { d: 'Flow', p: 'flow' },
  ftl: { d: 'FreeMarker', p: 'ftl' },
  gml: { d: 'GameMaker Language', p: 'gml' },
  gap: { d: 'GAP (CAS)', p: 'gap' },
  gcode: { d: 'G-code', p: 'gcode' },
  gdscript: { d: 'GDScript', p: 'gdscript' },
  gedcom: { d: 'GEDCOM', p: 'gedcom' },
  gettext: { d: 'gettext', p: 'gettext' },
  gherkin: { d: 'Gherkin', p: 'gherkin' },
  git: { d: 'Git', p: 'git' },
  gn: { d: 'GN', p: 'gn' },
  gradle: { d: 'Gradle', p: 'gradle' },
  graphql: { d: 'GraphQL', p: 'graphql' },
  groovy: { d: 'Groovy', p: 'groovy' },
  haml: { d: 'Haml', p: 'haml' },
  haxe: { d: 'Haxe', p: 'haxe' },
  hoon: { d: 'Hoon', p: 'hoon' },
  hpkp: { d: 'HTTP Public-Key-Pins', p: 'hpkp' },
  hsts: { d: 'HTTP Strict-Transport-Security', p: 'hsts' },
  ichigojam: { d: 'IchigoJam', p: 'ichigojam' },
  icon: { d: 'Icon', p: 'icon' },
  idris: { d: 'Idris', p: 'idris' },
  ignore: { d: '.ignore', p: 'ignore' },
  inform7: { d: 'Inform 7', p: 'inform7' },
  io: { d: 'Io', p: 'io' },
  j: { d: 'J', p: 'j' },
  javadoclike: { d: 'JavaDoc-like', p: 'javadoclike' },
  jexl: { d: 'Jexl', p: 'jexl' },
  jolie: { d: 'Jolie', p: 'jolie' },
  jq: { d: 'JQ', p: 'jq' },
  jsonp: { d: 'JSONP', p: 'jsonp' },
  jsstacktrace: { d: 'JS stack trace', p: 'jsstacktrace' },
  keepalived: { d: 'Keepalived Configure', p: 'keepalived' },
  keyman: { d: 'Keyman', p: 'keyman' },
  kumir: { d: 'KuMir', p: 'kumir' },
  kusto: { d: 'Kusto', p: 'kusto' },
  latte: { d: 'Latte', p: 'latte' },
  lilypond: { d: 'LilyPond', p: 'lilypond' },
  liquid: { d: 'Liquid', p: 'liquid' },
  livescript: { d: 'LiveScript', p: 'livescript' },
  llvm: { d: 'LLVM IR', p: 'llvm' },
  log: { d: 'Log file', p: 'log' },
  lolcode: { d: 'LOLCODE', p: 'lolcode' },
  magma: { d: 'Magma', p: 'magma' },
  maxscript: { d: 'MAXScript', p: 'maxscript' },
  mel: { d: 'MEL', p: 'mel' },
  mermaid: { d: 'Mermaid', p: 'mermaid' },
  metafont: { d: 'METAFONT', p: 'metafont' },
  mizar: { d: 'Mizar', p: 'mizar' },
  mongodb: { d: 'MongoDB', p: 'mongodb' },
  monkey: { d: 'Monkey', p: 'monkey' },
  moonscript: { d: 'MoonScript', p: 'moonscript' },
  n1ql: { d: 'N1QL', p: 'n1ql' },
  n4js: { d: 'N4JS', p: 'n4js' },
  naniscript: { d: 'Naninovel Script', p: 'naniscript' },
  nasm: { d: 'NASM', p: 'nasm' },
  neon: { d: 'NEON', p: 'neon' },
  nevod: { d: 'Nevod', p: 'nevod' },
  nsis: { d: 'NSIS', p: 'nsis' },
  odin: { d: 'Odin', p: 'odin' },
  opencl: { d: 'OpenCL', p: 'opencl' },
  openqasm: { d: 'OpenQasm', p: 'openqasm' },
  oz: { d: 'Oz', p: 'oz' },
  parigp: { d: 'PARI/GP', p: 'parigp' },
  parser: { d: 'Parser', p: 'parser' },
  pascaligo: { d: 'Pascaligo', p: 'pascaligo' },
  psl: { d: 'PATROL Scripting Language', p: 'psl' },
  pcaxis: { d: 'PC‑Axis', p: 'pcaxis' },
  peoplecode: { d: 'PeopleCode', p: 'peoplecode' },
  plsql: { d: 'PL/SQL', p: 'plsql' },
  powerquery: { d: 'PowerQuery', p: 'powerquery' },
  processing: { d: 'Processing', p: 'processing' },
  promql: { d: 'PromQL', p: 'promql' },
  properties: { d: '.properties', p: 'properties' },
  purescript: { d: 'PureScript', p: 'purescript' },
  qsharp: { d: 'Q#', p: 'qsharp' },
  q: { d: 'Q', p: 'q' },
  qml: { d: 'QML', p: 'qml' },
  qore: { d: 'Qore', p: 'qore' },
  razor: { d: 'Razor C#', p: 'cshtml' },
  reason: { d: 'Reason', p: 'reason' },
  rego: { d: 'Rego', p: 'rego' },
  renpy: { d: "Ren'py", p: 'renpy' },
  res: { d: 'ReScript', p: 'rescript' },
  rest: { d: 'reST', p: 'rest' },
  roboconf: { d: 'Roboconf', p: 'roboconf' },
  robot: { d: 'Robot Framework', p: 'robot' },
  sas: { d: 'SAS', p: 'sas' },
  scheme: { d: 'Scheme', p: 'scheme' },
  smali: { d: 'Smali', p: 'smali' },
  smalltalk: { d: 'Smalltalk', p: 'smalltalk' },
  smarty: { d: 'Smarty', p: 'smarty' },
  sml: { d: 'SML', p: 'sml' },
  sln: { d: 'Solution file', p: 'solution-file' },
  soy: { d: 'Soy', p: 'soy' },
  sparql: { d: 'SPARQL', p: 'sparql' },
  sqf: { d: 'SQF', p: 'sqf' },
  stan: { d: 'Stan', p: 'stan' },
  stata: { d: 'Stata Ado', p: 'stata' },
  iecst: { d: 'Structured Text', p: 'iecst' },
  stylus: { d: 'Stylus', p: 'stylus' },
  supercollider: { d: 'SuperCollider', p: 'supercollider' },
  systemd: { d: 'Systemd configuration', p: 'systemd' },
  t4: { d: 'T4 Text Templates (C#)', p: 't4-cs' },
  tap: { d: 'TAP', p: 'tap' },
  textile: { d: 'Textile', p: 'textile' },
  tremor: { d: 'Tremor', p: 'tremor' },
  trickle: { d: 'Tremor', p: 'tremor' },
  troy: { d: 'Tremor', p: 'tremor' },
  turtle: { d: 'Turtle', p: 'turtle' },
  twig: { d: 'Twig', p: 'twig' },
  typingscript: { d: 'TypoScript', p: 'typoscript' },
  uc: { d: 'UnrealScript', p: 'unrealscript' },
  uorazor: { d: 'UO Razor Script', p: 'uorazor' },
  uri: { d: 'URI', p: 'uri' },
  vala: { d: 'Vala', p: 'vala' },
  vbnet: { d: 'VB.Net', p: 'vbnet' },
  velocity: { d: 'Velocity', p: 'velocity' },
  verilog: { d: 'Verilog', p: 'verilog' },
  vhdl: { d: 'VHDL', p: 'vhdl' },
  warpscript: { d: 'WarpScript', p: 'warpscript' },
  wgsl: { d: 'WGSL', p: 'wgsl' },
  wiki: { d: 'Wiki markup', p: 'wiki' },
  wolfram: { d: 'Wolfram', p: 'wolfram' },
  wren: { d: 'Wren', p: 'wren' },
  xeoracube: { d: 'Xeora', p: 'xeoracube' },
  xojo: { d: 'Xojo', p: 'xojo' },
  xquery: { d: 'XQuery', p: 'xquery' },
  yang: { d: 'YANG', p: 'yang' },
  zig: { d: 'Zig', p: 'zig' },
};

export function getLanguageInfoByExtension(extension: string): LanguageInfo {
  const cleanExt = extension.replace(/^\./, '').toLowerCase();
  return (
    extToLangMap[cleanExt] ?? {
      d: 'code',
      p: 'code', // Fallback that Prism understands
    }
  );
}
